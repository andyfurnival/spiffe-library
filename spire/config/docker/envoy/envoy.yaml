node:
  id: "id_02"
  cluster: "cluster_02"
admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }
static_resources:
  listeners:
    - name: listener_mtls
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 3020
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                common_http_protocol_options:
                    idle_timeout: 1s
                forward_client_cert_details: sanitize_set
                set_current_client_cert_details:
                  uri: true
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  virtual_hosts:
                    - name: service_mtls
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: service_mtls
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        client.address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                        client.local.address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                        envoy.route.name: "%ROUTE_NAME%"
                        envoy.upstream.cluster: "%UPSTREAM_CLUSTER%"
                        host.hostname: "%HOSTNAME%"
                        http.request.method: "%REQ(:METHOD)%"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              # require client certificate for mutual authentication (mTLS)
              require_client_certificate: true
              common_tls_context:
                tls_certificate_sds_secret_configs:
                  - name: "spiffe://server.fs.com/workload/demo-service"
                    sds_config:
                      resource_api_version: V3
                      api_config_source:
                        api_type: GRPC
                        transport_api_version: V3
                        grpc_services:
                          envoy_grpc:
                            cluster_name: spire_agent
                combined_validation_context:
                  # validate the SPIFFE ID of the incoming clients (recommended)
                  default_validation_context:
                    match_typed_subject_alt_names:
                      - san_type: URI
                        matcher:
                          exact: "spiffe://server.fs.com/workload/demo-public"
                  validation_context_sds_secret_config:
                    name: "spiffe://server.fs.com"
                    sds_config:
                      api_config_source:
                        api_type: GRPC
                        grpc_services:
                          envoy_grpc:
                            cluster_name: spire_agent
                        transport_api_version: V3
                      resource_api_version: V3
                tls_params:
                  ecdh_curves:
                    - X25519:P-256:P-521:P-384
  clusters:
    - name: spire_agent
      connect_timeout: 0.25s
      http2_protocol_options: {}
      load_assignment:
        cluster_name: spire_agent
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /run/spire/public/workload_api.sock
    - name: service_mtls
      connect_timeout: 0.25s
      type: strict_dns
      load_assignment:
        cluster_name: service_mtls
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: workload-demo-service
                      port_value: 3010

